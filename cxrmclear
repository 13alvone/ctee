#!/usr/bin/env python3

import argparse
import re
import sys
import os

default_target = ''


def remove_control_bytes(b):
    control_bytes = [
        rb'\x1b\[\?\d*[hl]',            # CSI ? Pm h (DEC Private Mode Set)
        rb'\x1b\[\d*(;\d*)*[A-Za-z]',   # ANSI escape sequence
        rb'\x07',                       # Bell/beep
        rb'\x09',                       # Tab
        rb'\x0d',                       # Carriage return
        rb'\x20\x0d\x20\x0d',           # Two Zero Width Joiner characters
        rb'\x1b\x5d\x37\x3b',           # Start of an incomplete OSC sequence
        rb'\x1b\[[0-?]*[ -/]*[@-~]',
	    rb'\x1b\x5b\x31\x6d',           # Set Display Attribute Mode, specifically enabling bold text
        rb'\x1b\x5b\x37\x6d',           # Set Display Attribute Mode, specifically enabling image negative (reverse video)
        rb'\x1b\x5b\x31\x6d',           # Again enabling bold text
        rb'\x1b\x5b\x30\x6d',           # Resets all display attributes to their defaults
    ]
    return re.sub(b'|'.join(control_bytes), b'', b)


def handle_backspace(b):
    backspace_index = 0
    while True:
        backspace_index = b.find(b'\x08', backspace_index)
        if backspace_index == -1:
            break
        if backspace_index != 0:
            b = b[:backspace_index-1] + b[backspace_index+1:]
        else:
            b = b[1:]
        backspace_index -= 1
    return b


def process_file(filename, print_content=False):
    if not os.path.isfile(filename) or filename == '':
        print(f"[!] cxrmclear Error: '{filename}' does not exist, nor does ~/.ctee/ctee_cache")
        print("    - Please pass a filename from cwd or a full file path, or run a ctee session first and try again.")
        sys.exit(1)

    try:
        with open(filename, 'rb') as file:
            content = file.read()
    except Exception as e:
        print(f"[!] cxrmclear Error reading file: {e}")
        sys.exit(1)

    sanitized_content = remove_control_bytes(content)
    sanitized_content = handle_backspace(sanitized_content)

    if print_content:
        # If the print_content parameter is True, print the entire file content.
        print(sanitized_content.decode('utf-8', 'replace'))
        return

    try:
        with open(filename, 'wb') as file:
            file.write(sanitized_content)
    except Exception as e:
        print(f"[!] cxrmclear Error writing file: {e}")
        sys.exit(1)

    if not args.quiet:
        print(f"[+] Successfully sanitized '{filename}'")


if __name__ == '__main__':
    global args

    default_target = ''
    
    try:
        with open(os.path.expanduser('~/.ctee/ctee_cache'), 'r') as file_in:
            default_target = file_in.read().split(':')[0].replace('\n', '')
        file_in.close()

    except:
        print(f'[-] No ctee_cache available, checking for explicit filepath flag...')
    
    parser = argparse.ArgumentParser(description='Sanitize script replay files')
    parser.add_argument('-f', '--filename', help='Script replay file to sanitize', default=default_target)
    parser.add_argument('-l', '--lines', action='store_true', help='Print sanitized content to stdout')
    parser.add_argument('-q', '--quiet', action='store_true', help='Don\'t pre/post install details.')
    args = parser.parse_args()

    process_file(args.filename, args.lines)

