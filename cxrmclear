#!/usr/bin/env python3

import argparse
import re
import sys
import os

default_target = ''


def remove_control_bytes(b):
    control_bytes = [
        rb'\x1b\[\?\d*[hl]',            # CSI ? Pm h (DEC Private Mode Set)
        rb'\x1b\[\d*(;\d*)*[A-Za-z]',   # ANSI escape sequence
        rb'\x07',                       # Bell/beep
        rb'\x09',                       # Tab
        rb'\x0d',                       # Carriage return
    ]
    return re.sub(b'|'.join(control_bytes), b'', b)


def handle_backspace(b):
    backspace_index = 0
    while True:
        backspace_index = b.find(b'\x08', backspace_index)
        if backspace_index == -1:
            break
        # Don't delete anything if backspace is the first character
        if backspace_index != 0:
            b = b[:backspace_index-1] + b[backspace_index+1:]
        else:
            b = b[1:]
        backspace_index -= 1
    return b


def process_file(filename):
    if not os.path.isfile(filename):
        print(f"[!] cxrmclear Error: {filename} does not exist.")
        sys.exit(1)

    try:
        with open(filename, 'rb') as file:
            content = file.read()
    except Exception as e:
        print(f"[!] cxrmclear Error reading file: {e}")
        sys.exit(1)

    sanitized_content = remove_control_bytes(content)
    sanitized_content = handle_backspace(sanitized_content)

    try:
        with open(filename, 'wb') as file:
            file.write(sanitized_content)
    except Exception as e:
        print(f"[!] cxrmclear Error writing file: {e}")
        sys.exit(1)

    print(f"[+] Successfully sanitized '{filename}'")


if __name__ == '__main__':

    default_target = ''
    
    try:
        with open(os.path.expanduser('~/.ctee/ctee_cache'), 'r') as file_in:
            default_target = file_in.read().split(':')[-1].replace('\n', '')
        file_in.close()

    except Exception as e:
        print(f'[!] cxrmclear is unable to find `~/.ctee/ctee_cache`.\n\tError: `{e}`\n\tExiting...')
        exit(1)
    
    parser = argparse.ArgumentParser(description='Sanitize script replay files')
    parser.add_argument('-f', '--filename', help='The path of the script replay file to sanitize', default=default_target)
    args = parser.parse_args()

    process_file(args.filename)

