#!/usr/bin/env bash

# User Configs
age_out_days=7
age_out_count=20

if [ "$(id -u)" = "0" ]; then
    echo "[x] This script should not be started with with SUDO but will request it for a few subcommands.." >&2
    exit 1
fi

set -e # Exit on error

# Define directory to save output files
output_dir=$HOME/.ctee/
script_dir=$(dirname "$0")

# Function to cleanup temp files and remove pid file
function cleanup {
  echo "Cleaning up..."
  rm -f "$temp_bashrc"
  rm -f "$output_dir/ctee.pid" # remove pid file when script ends

  # Remove files older than 7 days
  find "$output_dir" -name "cli_record_*" -mtime +$age_out_days -exec rm {} \;
  find "$output_dir" -name "cli_timer_*" -mtime +$age_out_days -exec rm {} \;

  # If there are more than 'age_out_count' files, delete the oldest
  (ls -f -t1 $output_dir"cli_record_"* 2>/dev/null | head -n $age_out_count; ls -f $output_dir"cli_record_"* 2>/dev/null) | sort | uniq -u | xargs -I {} rm -f -- {}
  (ls -f -t1 $output_dir"cli_timer_"* 2>/dev/null | head -n $age_out_count; ls -f $output_dir"cli_timer_"* 2>/dev/null) | sort | uniq -u | xargs -I {} rm -f -- {}

  exit 0
}

# Register the cleanup function to be called on the EXIT signal
trap cleanup EXIT INT QUIT TERM HUP

# Generate a timestamp for unique filename
timestamp=$(date +%Y%m%d%H%M%S)
filename="cli_record_$timestamp"
tfilename="cli_timer_$timestamp"

# Check if the 'script' utility is installed and accessible
if ! command -v script &> /dev/null
then
    echo "The 'script' utility could not be found. Please install it and try again."
    exit 1
fi

# Create a temporary bashrc file
temp_bashrc=$(mktemp)

echo "export TMOUT=86400; readonly TMOUT" >> "$temp_bashrc" # Set a 24 hour timeout
cat $HOME/.ctee/etc/bashrc.ctee >> "$temp_bashrc"

# Create the target directory if it doesn't already exist
mkdir -p $output_dir

# Write the pid to a file
echo $$ > "$output_dir/ctee.pid"
output_cache_path=$output_dir"ctee_cache"

# Start recording with the 'script' command
# The --rcfile option ensures the temporary bashrc file is loaded
script --timing=$output_dir$tfilename -m advanced -a "$output_dir$filename" -q --command="bash --rcfile $temp_bashrc"

echo "Recording timing in $output_dir$tfilename"
echo "Recording saved in $output_dir$filename"
echo ""
echo "[+] CLI Recording File : CLI Recording Timer File"
echo ""
echo "    $output_dir$filename:$output_dir$tfilename"
echo "$output_dir$filename:$output_dir$tfilename" > $output_cache_path
echo "[+] Most Recent CLI Recording Files stored here:"
echo "    $output_cache_path"

zero_timing -f "$output_dir$tfilename"

scriptreplay -t "$output_dir$tfilename" -B $output_dir$filename | tee ./$filename"_HISTORY_PARSED"
