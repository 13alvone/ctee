#!/usr/bin/env python3

import os
import argparse
import sqlite3
from pathlib import Path

# Define command line arguments parser
parser = argparse.ArgumentParser(description="Process a utf-8 document and add contents to a SQLite database.")
parser.add_argument("file_path", help="Path to the utf-8 document.")
args = parser.parse_args()

# Check if file path is valid
if not Path(args.file_path).is_file():
    print(f"[!] cxwrite DB Write Error: File {args.file_path} does not exist.")
    exit(1)

# Read the file and split the contents
try:
    with open(args.file_path, 'r', encoding='utf-8') as file:
        contents = file.read()
except Exception as e:
    print(f"[!] cxwrite DB Error reading file: {e}")
    exit(1)

# Split by delimiter defined by the environment variable
delimiter = os.getenv("CTEE_CMD_DELIMITER")
ordered_list = contents.split(delimiter)

# Path to the database
# db_path = Path.home() / ".ctee/cxwrite_notes.db"
db_path = os.getenv("CTEE_CURRENT_DBFILE")

# Check if database file exists
if not db_path.is_file():
    print(f"[!] cxwrite DB Error: Database {db_path} does not exist.")
    exit(1)

# Connect to the database
try:
    conn = sqlite3.connect(str(db_path))
    c = conn.cursor()
except Exception as e:
    print(f"[!] cxwrite DB Error connecting to database: {e}")
    exit(1)

# Get the total count of rows in the table
c.execute("SELECT COUNT(*) FROM notes")
row_count = c.fetchone()[0]

# Compare the length of the list with the row count
if len(ordered_list) == row_count + 1:
    ordered_list.pop()  # Remove the last element if list is 1 too long
elif len(ordered_list) < row_count:
    ordered_list += [""] * (row_count - len(ordered_list))  # Fill with empty strings if list is too short
elif len(ordered_list) > row_count + 1:
    print("[!] cxwrite DB Error: Too many elements in the file.")
    conn.close()
    exit(1)

# Update the 'context' field of each row with the corresponding element of the list
for i, context in enumerate(ordered_list, start=1):
    try:
        cleaned_context = context.lstrip('\n').rstrip('\n').encode()
        c.execute("UPDATE notes SET context = ? WHERE rowid = ?", (cleaned_context, i))
    except Exception as e:
        print(f"[i] cxwrite DB Error updating database: {e}")
        conn.close()
        exit(1)

# Commit the changes and close the connection
conn.commit()
conn.close()

