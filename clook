#!/usr/bin/env python3

import os
import sys
import time
import base64
import sqlite3
import tempfile
import argparse
import subprocess
from io import StringIO
from colorama import Fore, Back, Style
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter, landscape

standard_start = " " + Fore.WHITE + Back.RED + ' --- ' + Back.RESET + Fore.RESET + Style.RESET_ALL
standard_stop = " " + Fore.WHITE + Back.RED + ' --- ' + Back.RESET + Fore.RESET + Style.RESET_ALL

def print_with_intention(_string, newline=True, tab=False):
    new_line = "\n" if newline else " "
    _tab = "\t" if tab else " "

    if _string.startswith("[i] "):
        print(_tab + Fore.WHITE + Back.BLUE + "[i]" + Back.RESET + Fore.RESET + " " +
              Style.RESET_ALL + Fore.WHITE + Back.BLUE + _string[4:] + Back.RESET + Fore.RESET + new_line)
    elif _string.startswith("[+] "):
        print(_tab + Fore.BLACK + Back.GREEN + "[+]" + Back.RESET + Fore.RESET + " " +
              Style.RESET_ALL + Fore.BLACK + Back.GREEN + _string[4:] + Fore.RESET + Back.RESET + new_line)
    elif _string.startswith("[^] "):
        print(_tab + Fore.WHITE + Back.RED + " > " + Back.RESET + Fore.RESET + " " +
              Style.RESET_ALL + _string[4:] + Fore.RESET + Back.RESET + new_line)
    elif _string.startswith("[-] "):
        print(_tab + Fore.BLACK + Back.GREEN + " > " + Back.RESET + Fore.RESET + " " +
              Style.RESET_ALL + _string[4:] + Fore.RESET + Back.RESET + new_line)
    elif _string.startswith("[!] "):
        print(_tab + Fore.WHITE + Back.RED + "[!]" + Back.RESET + Fore.RESET + " " +
              Style.RESET_ALL + Fore.WHITE + Back.RED + _string[4:] + Fore.RESET + Back.RESET + new_line)
    elif _string.startswith("[x] ") or _string.startswith("[X] "):
        print(_tab + "\t\t" + Fore.YELLOW + Back.RED + "[x]" + Back.RESET + Fore.RESET + " " +
              Style.RESET_ALL + Fore.YELLOW + Back.RED + _string[4:] + Fore.RESET + Back.RESET + new_line)


def decode_base64(data):
    try:
        return base64.b64decode(data).decode('utf-8')
    except Exception as e:
        print(f"Error decoding base64 data: {e}")
        return str(data)


def print_rows(rows, show_stdout):
    global standard_start, standard_stop
    for i, row in enumerate(rows, start=1):
        command = decode_base64(row[2])

        if command.startswith('cn '):
            continue

        note = decode_base64(row[4])
        nfilename = os.path.basename(row[0])
        print('\n')
        print_with_intention(f'[+] CMD {row[5]} ({row[1]}) --> {nfilename}')
        print_with_intention(f'[^] {command}')
        note_content = note.lstrip("cn ")

        if note_content:
            print_with_intention(f'[i] {note_content}')

        if show_stdout:
            print(f'{standard_start}\n\n{row[3].decode()}\n\n{standard_stop}\n')


def search_database(database, search_term=None, mode=None, n=1, show_stdout=False, cmd_id=None):
    try:
        conn = sqlite3.connect(database)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        for table in tables:
            if 'notes' in table:
                cursor.execute(f"SELECT * FROM {table[0]}")
                rows = cursor.fetchall()
                if cmd_id is not None:
                    for row in rows:
                        if row[5] == cmd_id: 
                            print_rows([row], show_stdout)
                            return
                else:
                    for i in range(len(rows)):
                        row = rows[i]
                        if search_term and (search_term in decode_base64(row[2]) or search_term in decode_base64(row[4]) or search_term in str(row[3])):
                            if mode == 'before':
                                if i - n >= 0:
                                    print_rows(rows[i-n:i], show_stdout)
                            elif mode == 'after':
                                if i + n < len(rows):
                                    print_rows(rows[i:i+n+1], show_stdout)
                            else:
                                print_rows([row], show_stdout)
                        elif not search_term:
                            print_rows([row], show_stdout)
        conn.close()
    except Exception as e:
        print_with_intention(f"[!] CLOOK Error processing database {database}: {e}")


class Tee(object):
    def __init__(self, *files):
        self.files = files
    def write(self, obj):
        for file in self.files:
            file.write(obj)
    def flush(self):
        for file in self.files:
            file.flush()


class DummyStream:
    def write(self, _): pass
    def flush(self): pass


def main():
    global args
    parser = argparse.ArgumentParser(description='Search in sqlite databases.')
    parser.add_argument('-s', '--search', type=str, help='The search term')
    parser.add_argument('-m', '--mode', type=str, help='Mode, either "before" or "after"')
    parser.add_argument('-n', type=int, default=1, help='Number of rows to print before or after the match')
    parser.add_argument('-o', '--stdout', action='store_true', help='Option to show stdout')
    parser.add_argument('-p', '--html', action='store_true', help='Generate HTML output')
    parser.add_argument('-c', '--cmd_id', type=int, help='The command id to search')
    parser.add_argument('--silent', action='store_true', help='Suppress console output')

    group = parser.add_mutually_exclusive_group() # Create mutually exclusive group
    group.add_argument('-d', '--dir', type=str, default='.', help='Directory to search for databases')
    group.add_argument('-f', '--file', type=str, help='The .db file to be processed')

    args = parser.parse_args()

    if args.silent:
        sys.stdout = DummyStream()

    databases = []

    if args.dir and not args.file:
        databases.extend([os.path.join(args.dir, f) for f in os.listdir(args.dir) if f.endswith('.db')])
    if args.file and args.file.endswith('.db'):
        databases.append(args.file)

    for database in databases:
        if args.html:
            stdout_string = StringIO()
            sys.stdout = Tee(sys.stdout, stdout_string)

        if args.search:
            search_database(database, args.search, args.mode, args.n, args.stdout, args.cmd_id)
        else:
            search_database(database, show_stdout=args.stdout, cmd_id=args.cmd_id)

        if args.html:
            with tempfile.NamedTemporaryFile(delete=False) as tmp:
                tmp.write(stdout_string.getvalue().encode())
                tmp_filename = tmp.name

            subprocess.run(['cxrmclear', '-qf', tmp_filename])

            with open(tmp_filename, 'r') as tmp:
                stdout_string_sanitized = tmp.read()

            os.remove(tmp_filename)

            html_filename = os.path.splitext(database)[0] + '.html'

            with open(html_filename, 'w') as f:
                f.write('<html>\n<head>\n<style>\npre { width: 800px; white-space: pre-wrap; word-wrap: break-word; }\n</style>\n</head>\n<body>\n')
                f.write('<pre>\n')
                f.write('---------------------------------------------------------\n')
                f.write('xx______     ______   ______     ______xxxx\n')
                f.write('x/\  ___\   /\__  _\ /\  ___\   /\  ___\xxx\n')
                f.write('x\ \ \____  \/_/\ \/ \ \  __\   \ \  __\xxx\n')
                f.write('xx\ \_____\    \ \_\  \ \_____\  \ \_____\x\n')
                f.write('xxx\/_____/     \/_/   \/_____/   \/_____/x\n')
                f.write('                                          \n')
                f.write('<h1>Command Line Session Transcription</t>\n')
                f.write('[i] Source: https://github.com/13alvone/ctee\n')
                f.write(f'[i] Generated Time: {time.strftime("%Y%m%d-%H%M%S")}\n')
                f.write(f'[i] Target Session DB: {database}\n')
                f.write('---------------------------------------------------------\n')
                f.write('                                          \n\n')
                f.write('</pre>\n')
                f.write('<pre>\n')
                f.write(stdout_string_sanitized)
                f.write('\n</pre>\n</body>\n</html>')

            sys.stdout = sys.stdout.files[0]


if __name__ == "__main__":
    main()

